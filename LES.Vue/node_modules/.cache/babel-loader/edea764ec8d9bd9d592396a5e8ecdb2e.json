{"remainingRequest":"D:\\数瀛信息科技\\公司项目\\广州西门子原材料立体库\\低压线圈\\src\\LES.Vue\\node_modules\\babel-loader\\lib\\index.js!D:\\数瀛信息科技\\公司项目\\广州西门子原材料立体库\\低压线圈\\src\\LES.Vue\\src\\promissionRouter.js","dependencies":[{"path":"D:\\数瀛信息科技\\公司项目\\广州西门子原材料立体库\\低压线圈\\src\\LES.Vue\\src\\promissionRouter.js","mtime":1610332596000},{"path":"D:\\数瀛信息科技\\公司项目\\广州西门子原材料立体库\\低压线圈\\src\\LES.Vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\数瀛信息科技\\公司项目\\广州西门子原材料立体库\\低压线圈\\src\\LES.Vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport _JSON$stringify from \"D:\\\\\\u6570\\u701B\\u4FE1\\u606F\\u79D1\\u6280\\\\\\u516C\\u53F8\\u9879\\u76EE\\\\\\u5E7F\\u5DDE\\u897F\\u95E8\\u5B50\\u539F\\u6750\\u6599\\u7ACB\\u4F53\\u5E93\\\\\\u4F4E\\u538B\\u7EBF\\u5708\\\\src\\\\LES.Vue\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/json/stringify\";\nimport _objectSpread from \"D:\\\\\\u6570\\u701B\\u4FE1\\u606F\\u79D1\\u6280\\\\\\u516C\\u53F8\\u9879\\u76EE\\\\\\u5E7F\\u5DDE\\u897F\\u95E8\\u5B50\\u539F\\u6750\\u6599\\u7ACB\\u4F53\\u5E93\\\\\\u4F4E\\u538B\\u7EBF\\u5708\\\\src\\\\LES.Vue\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.function.name\";\nimport router from '@/router';\nimport { resetRouter, filterAsyncRouter } from '@/router/index';\nimport { getNavigationBar, saveRefreshtime } from '@/api/api';\nimport store from \"@/store\";\nimport applicationUserManager from \"./Auth/applicationusermanager\"; //用来获取后台拿到的路由\n\nvar getRouter;\n\nif (!getRouter) {\n  //不加这个判断，路由会陷入死循环\n  if (!getObjArr('router')) {\n    //本地没有，则从数据库获取\n    var user = window.localStorage.user ? JSON.parse(window.localStorage.user) : null;\n\n    if (user && user.uID > 0) {\n      console.info(user.uID);\n      var loginParams = {\n        uid: user.uID\n      };\n      getNavigationBar(loginParams).then(function (data) {\n        if (data.success) {\n          console.info('%c get navigation bar from api succeed!', \"color:red\");\n          getRouter = data.response.children; //后台拿到路由\n\n          saveObjArr('router', getRouter); //存储路由到localStorage\n          // routerGo(to, next)//执行路由跳转方法\n        }\n      });\n    }\n  } else {\n    //从localStorage拿到了路由\n    console.info('%c get navigation bar from localStorage succeed!', \"color:green\");\n    getRouter = getObjArr('router'); //拿到路由\n\n    getRouter = filterAsyncRouter(getRouter); //过滤路由\n\n    router.$addRoutes(getRouter); //动态添加路由\n\n    global.antRouter = getRouter; //将路由数据传递给全局变量，做侧边栏菜单渲染工作\n  }\n}\n\nvar storeTemp = store;\nrouter.beforeEach(function (to, from, next) {\n  //验证Token\n  {\n    if (!storeTemp.state.token) {\n      storeTemp.commit(\"saveToken\", window.localStorage.Token);\n    }\n\n    if (!storeTemp.state.tokenExpire) {\n      storeTemp.commit(\"saveTokenExpire\", window.localStorage.TokenExpire);\n    }\n\n    saveRefreshtime();\n\n    if (to.meta.requireAuth) {\n      // 判断该路由是否需要登录权限\n      var curTime = new Date();\n      var expiretime = new Date(Date.parse(window.localStorage.TokenExpire));\n\n      if (storeTemp.state.token && storeTemp.state.token != \"undefined\") {\n        // 通过vuex state获取当前的token是否存在\n        next();\n      } else {\n        store.commit(\"saveToken\", \"\");\n        store.commit(\"saveTokenExpire\", \"\");\n        store.commit(\"saveTagsData\", \"\");\n        window.localStorage.removeItem('user');\n        window.localStorage.removeItem('NavigationBar');\n        window.localStorage.removeItem('router');\n\n        if (global.IS_IDS4) {\n          applicationUserManager.login();\n        } else {\n          next({\n            path: \"/login\",\n            query: {\n              redirect: to.fullPath // 将跳转的路由path作为参数，登录成功后跳转到该路由\n\n            }\n          });\n          window.location.reload();\n        }\n      }\n    } else {\n      next();\n    }\n  } //动态添加路由\n\n  {\n    //不加这个判断，路由会陷入死循环\n    if (!getRouter) {\n      if (!getObjArr('router')) {\n        var user = window.localStorage.user ? JSON.parse(window.localStorage.user) : null;\n\n        if (user && user.uID > 0) {\n          var loginParams = {\n            uid: user.uID\n          };\n          getNavigationBar(loginParams).then(function (data) {\n            console.log('router before each get navigation bar from api succeed!');\n\n            if (data.success) {\n              getRouter = data.response.children; //后台拿到路由\n\n              saveObjArr('router', getRouter); //存储路由到localStorage\n\n              routerGo(to, next); //执行路由跳转方法\n            }\n          });\n        }\n      } else {\n        //从localStorage拿到了路由\n        getRouter = getObjArr('router'); //拿到路由\n\n        routerGo(to, next);\n      }\n    } else {\n      if (to.name && to.name != 'login') {\n        getRouter = getObjArr('router'); //拿到路由\n\n        global.antRouter = getRouter; // routerGo(to, next)//执行路由跳转方法\n      }\n\n      next();\n    }\n  }\n});\n\nfunction routerGo(to, next) {\n  //过滤路由\n  getRouter = filterAsyncRouter(getRouter);\n  resetRouter(); //动态添加路由\n\n  router.$addRoutes(getRouter); //将路由数据传递给全局变量，做侧边栏菜单渲染工作\n\n  global.antRouter = getRouter;\n  next(_objectSpread({}, to, {\n    replace: true\n  }));\n} //localStorage 存储数组对象的方法\n\n\nfunction saveObjArr(name, data) {\n  localStorage.setItem(name, _JSON$stringify(data));\n} //localStorage 获取数组对象的方法\n\n\nfunction getObjArr(name) {\n  return JSON.parse(window.localStorage.getItem(name));\n}\n\nvar buttonList = [];\nexport var getButtonList = function getButtonList(routePath, routers) {\n  routers.forEach(function (element) {\n    if (routePath && element.path) {\n      var path = routePath.toLowerCase();\n\n      if (element.path && element.path.toLowerCase() === path) {\n        buttonList = element.children;\n        return;\n      } else if (element.children) {\n        getButtonList(path, element.children);\n      }\n    }\n  });\n  return buttonList;\n};",{"version":3,"sources":["D:\\数瀛信息科技\\公司项目\\广州西门子原材料立体库\\低压线圈\\src\\LES.Vue\\src\\promissionRouter.js"],"names":["router","resetRouter","filterAsyncRouter","getNavigationBar","saveRefreshtime","store","applicationUserManager","getRouter","getObjArr","user","window","localStorage","JSON","parse","uID","console","info","loginParams","uid","then","data","success","response","children","saveObjArr","$addRoutes","global","antRouter","storeTemp","beforeEach","to","from","next","state","token","commit","Token","tokenExpire","TokenExpire","meta","requireAuth","curTime","Date","expiretime","removeItem","IS_IDS4","login","path","query","redirect","fullPath","location","reload","log","routerGo","name","replace","setItem","getItem","buttonList","getButtonList","routePath","routers","forEach","element","toLowerCase"],"mappings":"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","sourcesContent":["import router from '@/router'\nimport { resetRouter, filterAsyncRouter } from '@/router/index'\n\nimport { getNavigationBar, saveRefreshtime } from '@/api/api';\nimport store from \"@/store\";\n\nimport applicationUserManager from \"./Auth/applicationusermanager\";\n\n//用来获取后台拿到的路由\nvar getRouter\nif (!getRouter) {//不加这个判断，路由会陷入死循环\n    if (!getObjArr('router')) {\n        //本地没有，则从数据库获取\n        var user = window.localStorage.user ? JSON.parse(window.localStorage.user) : null;\n        if (user && user.uID > 0) {\n            console.info(user.uID)\n            var loginParams = { uid: user.uID };\n            getNavigationBar(loginParams).then(data => {\n                if (data.success) {\n                    console.info('%c get navigation bar from api succeed!', \"color:red\")\n                    getRouter = data.response.children//后台拿到路由\n                    saveObjArr('router', getRouter) //存储路由到localStorage\n                    // routerGo(to, next)//执行路由跳转方法\n                }\n            });\n        }\n    } else {\n        //从localStorage拿到了路由\n        console.info('%c get navigation bar from localStorage succeed!', \"color:green\")\n        getRouter = getObjArr('router')//拿到路由\n        getRouter = filterAsyncRouter(getRouter) //过滤路由\n        router.$addRoutes(getRouter) //动态添加路由\n        global.antRouter = getRouter //将路由数据传递给全局变量，做侧边栏菜单渲染工作\n    }\n\n}\n\nvar storeTemp = store;\nrouter.beforeEach((to, from, next) => {\n    //验证Token\n    {\n        if (!storeTemp.state.token) {\n            storeTemp.commit(\"saveToken\", window.localStorage.Token)\n        }\n        if (!storeTemp.state.tokenExpire) {\n            storeTemp.commit(\"saveTokenExpire\", window.localStorage.TokenExpire)\n        }\n        saveRefreshtime();\n        if (to.meta.requireAuth) {\n            // 判断该路由是否需要登录权限\n            var curTime = new Date()\n            var expiretime = new Date(Date.parse(window.localStorage.TokenExpire))\n            if (storeTemp.state.token && storeTemp.state.token != \"undefined\") {\n                // 通过vuex state获取当前的token是否存在\n                next();\n            } else {\n                store.commit(\"saveToken\", \"\");\n                store.commit(\"saveTokenExpire\", \"\");\n                store.commit(\"saveTagsData\", \"\");\n                window.localStorage.removeItem('user');\n                window.localStorage.removeItem('NavigationBar');\n                window.localStorage.removeItem('router');\n\n                \n                if (global.IS_IDS4) {\n                applicationUserManager.login();\n                }else{\n                    next({\n                        path: \"/login\",\n                        query: { redirect: to.fullPath } // 将跳转的路由path作为参数，登录成功后跳转到该路由\n                    });\n\n                    window.location.reload()\n                }\n\n            }\n        } else {\n            next();\n        }\n    }\n\n    //动态添加路由\n    {\n        //不加这个判断，路由会陷入死循环\n        if (!getRouter) {\n            if (!getObjArr('router')) {\n                var user = window.localStorage.user ? JSON.parse(window.localStorage.user) : null;\n                if (user && user.uID > 0) {\n                    var loginParams = { uid: user.uID };\n                    getNavigationBar(loginParams).then(data => {\n                        console.log('router before each get navigation bar from api succeed!')\n                        if (data.success) {\n                            getRouter = data.response.children//后台拿到路由\n                            saveObjArr('router', getRouter) //存储路由到localStorage\n                            routerGo(to, next)//执行路由跳转方法\n                        }\n                    });\n                }\n            } else {\n                //从localStorage拿到了路由\n                getRouter = getObjArr('router')//拿到路由\n                routerGo(to, next)\n            }\n        } else {\n\n            if (to.name && to.name != 'login') {\n                getRouter = getObjArr('router')//拿到路由\n                global.antRouter = getRouter\n                // routerGo(to, next)//执行路由跳转方法\n            }\n            next()\n\n        }\n    }\n});\n\n\nfunction routerGo(to, next) {\n\n    //过滤路由\n    getRouter = filterAsyncRouter(getRouter)\n    resetRouter()\n\n    //动态添加路由\n    router.$addRoutes(getRouter)\n\n    //将路由数据传递给全局变量，做侧边栏菜单渲染工作\n    global.antRouter = getRouter\n    next({ ...to, replace: true })\n}\n\n//localStorage 存储数组对象的方法\nfunction saveObjArr(name, data) {\n    localStorage.setItem(name, JSON.stringify(data))\n}\n\n//localStorage 获取数组对象的方法\nfunction getObjArr(name) {\n    return JSON.parse(window.localStorage.getItem(name));\n}\n\n\nvar buttonList = [];\n\n\nexport const getButtonList = (routePath,routers) => {\n    routers.forEach(element => {\n        if (routePath&&element.path) {\n            let path = routePath.toLowerCase();\n            if (element.path && element.path.toLowerCase() === path) {\n                buttonList = element.children;\n                return;\n            } else if (element.children) {\n                getButtonList(path,element.children);\n            }\n        }\n    });\n    return buttonList;\n};\n\n\n"]}]}