{"remainingRequest":"D:\\数瀛信息科技\\公司项目\\广州西门子原材料立体库\\低压线圈\\src\\LES.Vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\数瀛信息科技\\公司项目\\广州西门子原材料立体库\\低压线圈\\src\\LES.Vue\\src\\views\\BasicData\\Base_Station.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\数瀛信息科技\\公司项目\\广州西门子原材料立体库\\低压线圈\\src\\LES.Vue\\src\\views\\BasicData\\Base_Station.vue","mtime":1611632066228},{"path":"D:\\数瀛信息科技\\公司项目\\广州西门子原材料立体库\\低压线圈\\src\\LES.Vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\数瀛信息科技\\公司项目\\广州西门子原材料立体库\\低压线圈\\src\\LES.Vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\数瀛信息科技\\公司项目\\广州西门子原材料立体库\\低压线圈\\src\\LES.Vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\数瀛信息科技\\公司项目\\广州西门子原材料立体库\\低压线圈\\src\\LES.Vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n \nimport util from '../../../util/date' \nimport { getStationListPage, removeStation, editStation, addStation } from '../../api/api'; \nimport { getButtonList } from \"../../promissionRouter\"; \nimport Toolbar from \"../../components/ToolbarButton\"; \nimport SearchForm from \"../../components/SearchForm\"; \nimport ToolbarExport from \"../../components/ToolbarExport\"; \nimport { formatDate } from '../../../util/tools' \n \n \nexport default { \n  components: { Toolbar, SearchForm, ToolbarExport },//注册子组件 \n  data () { \n    return { \n      //导出组件相关 \n      exportFileName: '$ChinaComment$信息',//要导出的文件名 \n      currentPageData: [],//当前页面的列表数据 \n      tHeader: ['站点编号','站点名称','所属产线','所属产线','创建者ID','创建者','修改ID','修改者','修改时间'],//当前页面列表的表头汉字数组，导出用 \n      filterVal: ['StationCode','StationName','AllowLine','Remark','CreateId','CreateBy','ModifyId','ModifyBy','ModifyTime'],//当前页面列表的表头属性数组，导出用 \n \n      //搜索框相关 \n      drawerSize: \"450px\",//drawner宽度设置 \n      searchFormInputPlaceholder: '请输入站点编号/站点名称/所属产线/所属产线/创建者ID/创建者/修改ID/修改者/修改时间',//要给子搜索组件传递的值 \n      formOptions: [ \n                        { \n                   label: '站点编号', \n                   prop: 'StationCode', \n                   element: 'el-input', \n                }, \n                { \n                   label: '站点名称', \n                   prop: 'StationName', \n                   element: 'el-input', \n                }, \n                { \n                   label: '所属产线', \n                   prop: 'AllowLine', \n                   element: 'el-input', \n                }, \n                { \n                   label: '所属产线', \n                   prop: 'Remark', \n                   element: 'el-input', \n                }, \n                { \n                   label: '创建者ID', \n                   prop: 'CreateId', \n                   element: 'el-input', \n                }, \n                { \n                   label: '创建者', \n                   prop: 'CreateBy', \n                   element: 'el-input', \n                }, \n                { \n                   label: '修改ID', \n                   prop: 'ModifyId', \n                   element: 'el-input', \n                }, \n                { \n                   label: '修改者', \n                   prop: 'ModifyBy', \n                   element: 'el-input', \n                }, \n                { \n                   label: '修改时间', \n                   prop: 'ModifyTime', \n                   element: 'el-date-picker', \n                },  \n      ], \n \n \n      tableHeight: window.innerHeight - 230, // 500, // 这个值不能设置小了，设置小了，界面就不对了 \n \n      isAdd: false, // 是否是新增 \n      dialogTitle: '', \n \n      filters: { \n        name: '' \n      }, \n      Stations: [], \n      roles: [], \n      total: 0, \n      buttonList: [], \n      currentRow: null, \n      page: 1, \n      pageSize: 10, \n      listLoading: false, \n      sels: [],//列表选中列 \n \n      addFormVisible: false,//新增界面是否显示 \n      addLoading: false, \n      //新增界面数据 \n      addForm: { \n      \n      } \n \n    } \n  }, \n  methods: { \n    // 设置索引 \n    indexMethod (index) { \n      return (this.page - 1) * this.pageSize + 1 + index \n    }, \n    // 时间格式化 \n    formatterDateTime (row, column, cellValue, index) { \n      if (cellValue === null || cellValue === '') { \n        return '' \n      } \n      var t = cellValue.slice(6, 19) // 截取字符串 \n      var NewDtime = new Date(parseInt(t)) \n      return formatDate(NewDtime, 'yyyy-MM-dd hh:mm:ss') \n    }, \n    selectCurrentRow (val) { \n      this.currentRow = val; \n    }, \n    callFunction (item) { \n      this.filters = { \n        name: item.search \n      }; \n      this[item.Func].apply(this, item); \n    }, \n    handleCurrentChange (val) { \n      this.page = val; \n      this.getStations(); \n    }, \n    handleSizeChange (val) { \n      this.pageSize = val; \n      this.getStations(); \n    }, \n    /** \n     * 获取请求参数 \n     * flag:标记，1代表普通分页查询，2代表不分页，获取全部数据 \n     */ \n    getPostParam (flag) { \n      let para = Object.assign({}, this.$refs.ChildSearchForm.getFormData()); \n      para.page = this.page \n      para.pageSize = this.pageSize \n      if (flag === '2') { // 全部导出 \n        para.page = 1 \n        para.pageSize = 10000 \n      } \n      return para \n    }, \n    //获取码表集列表 \n    getStations (formValue) { \n      //this.total = 0 \n      //this.Stations = null \n      let para = this.getPostParam('1'); \n      this.listLoading = true; \n      getStationListPage(para).then((res) => { \n        this.total = res.data.response.dataCount; \n        this.Stations = res.data.response.data; \n        this.listLoading = false; \n      }); \n    }, \n    //获取全部列表 \n    exportAllData () { \n      let para = this.getPostParam('2'); \n      this.listLoading = true; \n      getStationListPage(para).then((res) => { \n        var allData = res.data.response.data; \n        this.$refs.cmToolbarExport.export2Excel(allData); \n        this.listLoading = false; \n      }); \n    }, \n    //删除 \n    handleDel () { \n      let row = this.currentRow; \n      if (!row) { \n        this.$message({ \n          message: \"请选择要删除的一行数据！\", \n          type: \"error\" \n        }); \n        return; \n      } \n      this.$confirm('确认删除该记录吗?', '提示', { \n        type: 'warning' \n      }).then(() => { \n        this.listLoading = true; \n        let para = { id: row.Id }; \n        removeStation(para).then((res) => { \n \n          if (util.isEmt.format(res)) { \n            this.listLoading = false; \n            return; \n          } \n          this.listLoading = false; \n          //NProgress.done(); \n          if (res.data.success) { \n            this.$message({ \n              message: '删除成功', \n              type: 'success' \n            }); \n \n          } else { \n            this.$message({ \n              message: res.data.msg, \n              type: 'error' \n            }); \n          } \n \n          this.getStations(); \n        }); \n      }).catch(() => { \n \n      }); \n    }, \n    //显示编辑界面 \n    handleEdit () { \n      let row = this.currentRow; \n      if (!row) { \n        this.$message({ \n          message: \"请选择要编辑的一行数据！\", \n          type: \"error\" \n        }); \n \n        return; \n      } \n      this.isAdd = false \n      this.dialogTitle = '编辑' \n      this.addFormVisible = true; \n      this.addForm = { \n      }; \n      debugger \n      this.addForm = Object.assign({}, row); \n    }, \n    //显示新增界面 \n    handleAdd () { \n      this.isAdd = true \n      this.dialogTitle = '新增' \n      this.addFormVisible = true; \n      this.addForm = { \n      }; \n    }, \n    // 更新数据 \n    SaveData (formName) { \n      this.submitDisabled = true \n \n      this.$refs.addForm.validate((valid) => { \n        if (valid) { \n          this.$confirm('确认提交吗？', '提示', {}).then(() => { \n            this.addLoading = true; \n            let para = Object.assign({}, this.addForm); \n            if (this.isAdd) {//新增 \n              addStation(para).then((res) => { \n \n                if (util.isEmt.format(res)) { \n                  this.addLoading = false; \n                  return; \n                } \n \n                if (res.data.success) { \n                  this.addLoading = false; \n                  //NProgress.done(); \n                  this.$message({ \n                    message: res.data.msg, \n                    type: 'success' \n                  }); \n                  this.$refs['addForm'].resetFields(); \n                  this.addFormVisible = false; \n                  this.getStations(); \n                } \n                else { \n                  this.addLoading = false; \n                  this.$message({ \n                    message: res.data.msg, \n                    type: 'error' \n                  }); \n                } \n \n              }); \n            } else {//编辑 \n              editStation(para).then((res) => { \n \n                if (util.isEmt.format(res)) { \n                  this.addLoading = false; \n                  return; \n                } \n                if (res.data.success) { \n                  this.addLoading = false; \n                  //NProgress.done(); \n                  this.$message({ \n                    message: res.data.msg, \n                    type: 'success' \n                  }); \n                  this.$refs['addForm'].resetFields(); \n                  this.addFormVisible = false; \n                  this.getStations(); \n                } \n                else { \n                  this.addLoading = false; \n                  this.$message({ \n                    message: res.data.msg, \n                    type: 'error' \n                  }); \n                } \n              }); \n            } \n          }); \n        } \n      }); \n    }, \n    selsChange: function (sels) { \n      this.sels = sels; \n    }, \n    //导出 \n    handleExport () { \n      this.currentPageData = this.Stations \n      this.$refs.cmToolbarExport.showPrintPage() \n    }, \n  }, \n  mounted () { \n    this.getStations(); \n \n    let routers = window.localStorage.router \n      ? JSON.parse(window.localStorage.router) \n      : []; \n    this.buttonList = getButtonList(this.$route.path, routers); \n \n  } \n} \n \n",{"version":3,"sources":["Base_Station.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA","file":"Base_Station.vue","sourceRoot":"src\\views\\BasicData","sourcesContent":["<template> \n  <section> \n    <!--工具条--> \n    <el-col :span=\"24\" \n            class=\"toolbar\" \n            style=\"padding-bottom: 0px;\"> \n      <el-form :inline=\"true\" \n               @submit.native.prevent> \n        <toolbar :buttonList=\"buttonList\" \n                 @callFunction=\"callFunction\"> \n        </toolbar> \n        <!-- 搜索 --> \n        <SearchForm :formOptions=\"formOptions\" \n                    :drawerSize=\"drawerSize\" \n                    :searchFormInputPlaceholder=\"searchFormInputPlaceholder\" \n                    ref=\"ChildSearchForm\" \n                    @onSearch=\"getStations\" /> \n      </el-form> \n    </el-col> \n \n    <!--列表--> \n    <el-table :data=\"Stations\" \n              :height=\"tableHeight\" \n              highlight-current-row \n              size=\"small\" \n              @current-change=\"selectCurrentRow\" \n              v-loading=\"listLoading\" \n              @selection-change=\"selsChange\" \n              style=\"width: 99%;\"> \n      <el-table-column type=\"index\" \n                       :index=\"indexMethod\" \n                       label=\"#\" \n                       align=\"center\" \n                       width=\"50\"> \n      </el-table-column> \n                <el-table-column prop=\"StationCode\" label=\"站点编号\" align=\"center\" > \n          </el-table-column> \n          <el-table-column prop=\"StationName\" label=\"站点名称\" align=\"center\" > \n          </el-table-column> \n          <el-table-column prop=\"AllowLine\" label=\"所属产线\" align=\"center\" > \n          </el-table-column> \n          <el-table-column prop=\"Remark\" label=\"所属产线\" align=\"center\" > \n          </el-table-column> \n          <el-table-column prop=\"CreateId\" label=\"创建者ID\" align=\"center\" > \n          </el-table-column> \n          <el-table-column prop=\"CreateBy\" label=\"创建者\" align=\"center\" > \n          </el-table-column> \n          <el-table-column prop=\"CreateTime\" label=\"创建时间\" width=\"150\" align=\"center\" :formatter=\"formatterDateTime\" > \n          </el-table-column> \n          <el-table-column prop=\"ModifyId\" label=\"修改ID\" align=\"center\" > \n          </el-table-column> \n          <el-table-column prop=\"ModifyBy\" label=\"修改者\" align=\"center\" > \n          </el-table-column> \n          <el-table-column prop=\"ModifyTime\" label=\"修改时间\" width=\"150\" align=\"center\" :formatter=\"formatterDateTime\" > \n          </el-table-column> \n \n    </el-table> \n \n    <!--工具条--> \n    <el-col :span=\"24\" \n            style=\"margin:10px 10px 10px 0px;\" \n            class=\"toolbar\"> \n      <el-pagination @size-change=\"handleSizeChange\" \n                     @current-change=\"handleCurrentChange\" \n                     :current-page=\"page\" \n                     background \n                     :page-sizes=\"[5,10,50,100, 200, 300, 400]\" \n                     :page-size=\"pageSize\" \n                     layout=\"total, sizes, prev, pager, next, jumper\" \n                     :total=\"total\"> \n      </el-pagination> \n    </el-col> \n    <!--新增/编辑界面--> \n    <el-dialog :title=\"dialogTitle\" \n               :visible.sync=\"addFormVisible\" \n               v-model=\"addFormVisible\" \n               :close-on-click-modal=\"false\"> \n      <el-form :model=\"addForm\" \n               size=\"small\" \n               label-width=\"80px\" \n               ref=\"addForm\"> \n                        <el-form-item label=\"站点编号\" prop=\"StationCode\" :rules=\"[{ required: true, message: '站点编号不能为空'}]\"> \n                  <el-input v-model=\"addForm.StationCode\"></el-input> \n                </el-form-item> \n                <el-form-item label=\"站点名称\" prop=\"StationName\" :rules=\"[{ required: true, message: '站点名称不能为空'}]\"> \n                  <el-input v-model=\"addForm.StationName\"></el-input> \n                </el-form-item> \n                <el-form-item label=\"所属产线\" prop=\"AllowLine\" :rules=\"[{ required: true, message: '所属产线不能为空'}]\"> \n                  <el-input v-model=\"addForm.AllowLine\"></el-input> \n                </el-form-item> \n                <el-form-item label=\"所属产线\" prop=\"Remark \"> \n                  <el-input v-model=\"addForm.Remark\"></el-input> \n                </el-form-item> \n                <el-form-item label=\"创建者ID\" prop=\"CreateId \"> \n                  <el-input v-model=\"addForm.CreateId\"></el-input> \n                </el-form-item> \n                <el-form-item label=\"创建者\" prop=\"CreateBy \"> \n                  <el-input v-model=\"addForm.CreateBy\"></el-input> \n                </el-form-item> \n                <el-form-item label=\"修改ID\" prop=\"ModifyId \"> \n                  <el-input v-model=\"addForm.ModifyId\"></el-input> \n                </el-form-item> \n                <el-form-item label=\"修改者\" prop=\"ModifyBy \"> \n                  <el-input v-model=\"addForm.ModifyBy\"></el-input> \n                </el-form-item> \n                <el-form-item label=\"修改时间\" prop=\"ModifyTime \"> \n                  <el-input v-model=\"addForm.ModifyTime\"></el-input> \n                </el-form-item> \n \n      </el-form> \n      <div slot=\"footer\" \n           class=\"dialog-footer\"> \n        <el-button @click.native=\"addFormVisible = false\">取消</el-button> \n        <el-button type=\"primary\" \n                   @click.native=\"SaveData\" \n                   :loading=\"addLoading\">提交</el-button> \n      </div> \n    </el-dialog> \n    <!-- 导出组件 --> \n    <ToolbarExport ref=\"cmToolbarExport\" \n                   :exportFileName=\"exportFileName\" \n                   :filterVal=\"filterVal\" \n                   :currentPageData=\"currentPageData\" \n                   :tHeader=\"tHeader\" /> \n  </section> \n</template> \n \n<script> \nimport util from '../../../util/date' \nimport { getStationListPage, removeStation, editStation, addStation } from '../../api/api'; \nimport { getButtonList } from \"../../promissionRouter\"; \nimport Toolbar from \"../../components/ToolbarButton\"; \nimport SearchForm from \"../../components/SearchForm\"; \nimport ToolbarExport from \"../../components/ToolbarExport\"; \nimport { formatDate } from '../../../util/tools' \n \n \nexport default { \n  components: { Toolbar, SearchForm, ToolbarExport },//注册子组件 \n  data () { \n    return { \n      //导出组件相关 \n      exportFileName: '$ChinaComment$信息',//要导出的文件名 \n      currentPageData: [],//当前页面的列表数据 \n      tHeader: ['站点编号','站点名称','所属产线','所属产线','创建者ID','创建者','修改ID','修改者','修改时间'],//当前页面列表的表头汉字数组，导出用 \n      filterVal: ['StationCode','StationName','AllowLine','Remark','CreateId','CreateBy','ModifyId','ModifyBy','ModifyTime'],//当前页面列表的表头属性数组，导出用 \n \n      //搜索框相关 \n      drawerSize: \"450px\",//drawner宽度设置 \n      searchFormInputPlaceholder: '请输入站点编号/站点名称/所属产线/所属产线/创建者ID/创建者/修改ID/修改者/修改时间',//要给子搜索组件传递的值 \n      formOptions: [ \n                        { \n                   label: '站点编号', \n                   prop: 'StationCode', \n                   element: 'el-input', \n                }, \n                { \n                   label: '站点名称', \n                   prop: 'StationName', \n                   element: 'el-input', \n                }, \n                { \n                   label: '所属产线', \n                   prop: 'AllowLine', \n                   element: 'el-input', \n                }, \n                { \n                   label: '所属产线', \n                   prop: 'Remark', \n                   element: 'el-input', \n                }, \n                { \n                   label: '创建者ID', \n                   prop: 'CreateId', \n                   element: 'el-input', \n                }, \n                { \n                   label: '创建者', \n                   prop: 'CreateBy', \n                   element: 'el-input', \n                }, \n                { \n                   label: '修改ID', \n                   prop: 'ModifyId', \n                   element: 'el-input', \n                }, \n                { \n                   label: '修改者', \n                   prop: 'ModifyBy', \n                   element: 'el-input', \n                }, \n                { \n                   label: '修改时间', \n                   prop: 'ModifyTime', \n                   element: 'el-date-picker', \n                },  \n      ], \n \n \n      tableHeight: window.innerHeight - 230, // 500, // 这个值不能设置小了，设置小了，界面就不对了 \n \n      isAdd: false, // 是否是新增 \n      dialogTitle: '', \n \n      filters: { \n        name: '' \n      }, \n      Stations: [], \n      roles: [], \n      total: 0, \n      buttonList: [], \n      currentRow: null, \n      page: 1, \n      pageSize: 10, \n      listLoading: false, \n      sels: [],//列表选中列 \n \n      addFormVisible: false,//新增界面是否显示 \n      addLoading: false, \n      //新增界面数据 \n      addForm: { \n      \n      } \n \n    } \n  }, \n  methods: { \n    // 设置索引 \n    indexMethod (index) { \n      return (this.page - 1) * this.pageSize + 1 + index \n    }, \n    // 时间格式化 \n    formatterDateTime (row, column, cellValue, index) { \n      if (cellValue === null || cellValue === '') { \n        return '' \n      } \n      var t = cellValue.slice(6, 19) // 截取字符串 \n      var NewDtime = new Date(parseInt(t)) \n      return formatDate(NewDtime, 'yyyy-MM-dd hh:mm:ss') \n    }, \n    selectCurrentRow (val) { \n      this.currentRow = val; \n    }, \n    callFunction (item) { \n      this.filters = { \n        name: item.search \n      }; \n      this[item.Func].apply(this, item); \n    }, \n    handleCurrentChange (val) { \n      this.page = val; \n      this.getStations(); \n    }, \n    handleSizeChange (val) { \n      this.pageSize = val; \n      this.getStations(); \n    }, \n    /** \n     * 获取请求参数 \n     * flag:标记，1代表普通分页查询，2代表不分页，获取全部数据 \n     */ \n    getPostParam (flag) { \n      let para = Object.assign({}, this.$refs.ChildSearchForm.getFormData()); \n      para.page = this.page \n      para.pageSize = this.pageSize \n      if (flag === '2') { // 全部导出 \n        para.page = 1 \n        para.pageSize = 10000 \n      } \n      return para \n    }, \n    //获取码表集列表 \n    getStations (formValue) { \n      //this.total = 0 \n      //this.Stations = null \n      let para = this.getPostParam('1'); \n      this.listLoading = true; \n      getStationListPage(para).then((res) => { \n        this.total = res.data.response.dataCount; \n        this.Stations = res.data.response.data; \n        this.listLoading = false; \n      }); \n    }, \n    //获取全部列表 \n    exportAllData () { \n      let para = this.getPostParam('2'); \n      this.listLoading = true; \n      getStationListPage(para).then((res) => { \n        var allData = res.data.response.data; \n        this.$refs.cmToolbarExport.export2Excel(allData); \n        this.listLoading = false; \n      }); \n    }, \n    //删除 \n    handleDel () { \n      let row = this.currentRow; \n      if (!row) { \n        this.$message({ \n          message: \"请选择要删除的一行数据！\", \n          type: \"error\" \n        }); \n        return; \n      } \n      this.$confirm('确认删除该记录吗?', '提示', { \n        type: 'warning' \n      }).then(() => { \n        this.listLoading = true; \n        let para = { id: row.Id }; \n        removeStation(para).then((res) => { \n \n          if (util.isEmt.format(res)) { \n            this.listLoading = false; \n            return; \n          } \n          this.listLoading = false; \n          //NProgress.done(); \n          if (res.data.success) { \n            this.$message({ \n              message: '删除成功', \n              type: 'success' \n            }); \n \n          } else { \n            this.$message({ \n              message: res.data.msg, \n              type: 'error' \n            }); \n          } \n \n          this.getStations(); \n        }); \n      }).catch(() => { \n \n      }); \n    }, \n    //显示编辑界面 \n    handleEdit () { \n      let row = this.currentRow; \n      if (!row) { \n        this.$message({ \n          message: \"请选择要编辑的一行数据！\", \n          type: \"error\" \n        }); \n \n        return; \n      } \n      this.isAdd = false \n      this.dialogTitle = '编辑' \n      this.addFormVisible = true; \n      this.addForm = { \n      }; \n      debugger \n      this.addForm = Object.assign({}, row); \n    }, \n    //显示新增界面 \n    handleAdd () { \n      this.isAdd = true \n      this.dialogTitle = '新增' \n      this.addFormVisible = true; \n      this.addForm = { \n      }; \n    }, \n    // 更新数据 \n    SaveData (formName) { \n      this.submitDisabled = true \n \n      this.$refs.addForm.validate((valid) => { \n        if (valid) { \n          this.$confirm('确认提交吗？', '提示', {}).then(() => { \n            this.addLoading = true; \n            let para = Object.assign({}, this.addForm); \n            if (this.isAdd) {//新增 \n              addStation(para).then((res) => { \n \n                if (util.isEmt.format(res)) { \n                  this.addLoading = false; \n                  return; \n                } \n \n                if (res.data.success) { \n                  this.addLoading = false; \n                  //NProgress.done(); \n                  this.$message({ \n                    message: res.data.msg, \n                    type: 'success' \n                  }); \n                  this.$refs['addForm'].resetFields(); \n                  this.addFormVisible = false; \n                  this.getStations(); \n                } \n                else { \n                  this.addLoading = false; \n                  this.$message({ \n                    message: res.data.msg, \n                    type: 'error' \n                  }); \n                } \n \n              }); \n            } else {//编辑 \n              editStation(para).then((res) => { \n \n                if (util.isEmt.format(res)) { \n                  this.addLoading = false; \n                  return; \n                } \n                if (res.data.success) { \n                  this.addLoading = false; \n                  //NProgress.done(); \n                  this.$message({ \n                    message: res.data.msg, \n                    type: 'success' \n                  }); \n                  this.$refs['addForm'].resetFields(); \n                  this.addFormVisible = false; \n                  this.getStations(); \n                } \n                else { \n                  this.addLoading = false; \n                  this.$message({ \n                    message: res.data.msg, \n                    type: 'error' \n                  }); \n                } \n              }); \n            } \n          }); \n        } \n      }); \n    }, \n    selsChange: function (sels) { \n      this.sels = sels; \n    }, \n    //导出 \n    handleExport () { \n      this.currentPageData = this.Stations \n      this.$refs.cmToolbarExport.showPrintPage() \n    }, \n  }, \n  mounted () { \n    this.getStations(); \n \n    let routers = window.localStorage.router \n      ? JSON.parse(window.localStorage.router) \n      : []; \n    this.buttonList = getButtonList(this.$route.path, routers); \n \n  } \n} \n \n</script> \n \n<style lang=\"scss\" scoped> \n</style> \n"]}]}