{"remainingRequest":"C:\\框架\\Blog.Admin-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\框架\\Blog.Admin-master\\src\\views\\Task\\QuartzJob.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\框架\\Blog.Admin-master\\src\\views\\Task\\QuartzJob.vue","mtime":1610332596000},{"path":"C:\\框架\\Blog.Admin-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\框架\\Blog.Admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\框架\\Blog.Admin-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport util from \"../../../util/date\";\nimport { getTaskListPage, removeTask, editTask, addTask,startJob, stopJob, reCovery } from \"../../api/api\";\nimport { getButtonList } from \"../../promissionRouter\";\nimport Toolbar from \"../../components/Toolbar\";\n\nexport default {\n  components: { Toolbar },\n  data() {\n    return {\n      filters: {\n        name: \"\"\n      },\n      buttonList: [],\n      Tasks: [],\n      statusList: [\n        { name: \"激活\", value: true },\n        { name: \"禁用\", value: false }\n      ],\n      total: 0,\n      page: 1,\n      listLoading: false,\n      sels: [], //列表选中列\n      currentRow: null,\n      addDialogFormVisible: false,\n      editFormVisible: false, //编辑界面是否显示\n      editLoading: false,\n      editFormRules: {\n        JobGroup: [{ required: true, message: \"请输入组名\", trigger: \"blur\" }],\n        Name: [{ required: true, message: \"请输入Job名\", trigger: \"blur\" }],\n        BeginTime: [{ required: true, message: \"请选择开始时间\", trigger: \"blur\" }],\n        EndTime: [{ required: true, message: \"请选择结束时间\", trigger: \"blur\" }],\n        AssemblyName: [{ required: true, message: \"请输入程序集名\", trigger: \"blur\" }],\n        ClassName: [{ required: true, message: \"请输入执行的Job类名\", trigger: \"blur\" }],\n      },\n      //编辑界面数据\n      editForm: {\n        Id: 0,\n        Name: \"\",\n        JobGroup: \"\",\n        Name: \"\",\n        TriggerType: 1,\n        Cron: \"\",\n        IntervalSecond: 0,\n        BeginTime: \"\",\n        EndTime: \"\",\n        AssemblyName: \"\",\n        ClassName: \"\",\n        Remark: \"\",\n        JobParams:\"\",\n        IsDeleted:false,\n        IsStart: false\n      },\n\n      addFormVisible: false, //新增界面是否显示\n      addLoading: false,\n      addFormRules: {\n        JobGroup: [{ required: true, message: \"请输入组名\", trigger: \"blur\" }],\n        Name: [{ required: true, message: \"请输入Job名\", trigger: \"blur\" }],\n        BeginTime: [{ required: true, message: \"请选择开始时间\", trigger: \"blur\" }],\n        EndTime: [{ required: true, message: \"请选择结束时间\", trigger: \"blur\" }],\n        AssemblyName: [{ required: true, message: \"请输入程序集名\", trigger: \"blur\" }],\n        ClassName: [{ required: true, message: \"请输入执行的Job类名\", trigger: \"blur\" }],\n      },\n      //新增界面数据\n      addForm: {\n        Id: 0,\n        Name: \"\",\n        JobGroup: \"\",\n        Name: \"\",\n        TriggerType: 1,\n        Cron: \"\",\n        IntervalSecond: 0,\n        BeginTime: \"\",\n        EndTime: \"\",\n        AssemblyName: \"\",\n        ClassName: \"\",\n        JobParams:\"\",\n        Remark: \"\",\n        IsDeleted:false,\n        IsStart: false\n      }\n    };\n  },\n  methods: {\n    selectCurrentRow(val) {\n      this.currentRow = val;\n    },\n    callFunction(item) {\n      this.filters = {\n        name: item.search\n      };\n      this[item.Func].apply(this, item);\n    },\n    //性别显示转换\n    formatEnabled: function(row, column) {\n      return row.Enabled ? \"正常\" : \"未知\";\n    },\n    formatCreateTime: function(row, column) {\n      return !row.CreateTime || row.CreateTime == \"\"\n        ? \"\"\n        : util.formatDate.format(new Date(row.CreateTime), \"yyyy-MM-dd\");\n    },\n    formatBeginTime: function(row, column) {\n      return !row.BeginTime || row.BeginTime == \"\"\n        ? \"\"\n        : util.formatDate.format(new Date(row.BeginTime), \"yyyy-MM-dd\");\n    },\n    formatEndTime: function(row, column) {\n      return !row.EndTime || row.EndTime == \"\"\n        ? \"\"\n        : util.formatDate.format(new Date(row.EndTime), \"yyyy-MM-dd\");\n    },\n    handleCurrentChange(val) {\n      this.page = val;\n      this.getTasks();\n    },\n    //获取用户列表\n    getTasks() {\n      let _this = this;\n      let para = {\n        page: this.page,\n        key: this.filters.name\n      };\n      this.listLoading = true;\n      //NProgress.start();\n      getTaskListPage(para).then(res => {\n        this.total = res.data.response.dataCount;\n        this.Tasks = res.data.response.data;\n        this.listLoading = false;\n\n        //NProgress.done();\n      });\n    },\n    //删除\n    handleDel() {\n      let row = this.currentRow;\n      if (!row) {\n        this.$message({\n          message: \"请选择要编辑的一行数据！\",\n          type: \"error\"\n        });\n\n        return;\n      }\n      this.$confirm(\"确认删除该记录吗?\", \"提示\", {\n        type: \"warning\"\n      })\n        .then(() => {\n          this.listLoading = true;\n          //NProgress.start();\n          let para = { id: row.Id };\n          removeTask(para).then(res => {\n            if (util.isEmt.format(res)) {\n              this.listLoading = false;\n              return;\n            }\n            this.listLoading = false;\n            //NProgress.done();\n            if (res.data.success) {\n              this.$message({\n                message: \"删除成功\",\n                type: \"success\"\n              });\n            } else {\n              this.$message({\n                message: res.data.msg,\n                type: \"error\"\n              });\n            }\n\n            this.getTasks();\n          });\n        })\n        .catch(() => {});\n    },\n    //显示编辑界面\n    handleEdit() {\n      let row = this.currentRow;\n      if (!row) {\n        this.$message({\n          message: \"请选择要编辑的一行数据！\",\n          type: \"error\"\n        });\n\n        return;\n      }\n\n      if (row.TriggerType==1) {\n          row.TriggerType=true\n      }\n\n      this.editFormVisible = true;\n      this.editForm = Object.assign({}, row);\n    },\n    //显示新增界面\n    handleAdd() {\n      this.addFormVisible = true;\n      this.addForm = {\n        Id: 0,\n        Name: \"\",\n        JobGroup: \"\",\n        Name: \"\",\n        TriggerType: true,\n        Cron: \"\",\n        IntervalSecond: 0,\n        BeginTime: \"\",\n        EndTime: \"\",\n        AssemblyName: \"\",\n        ClassName: \"\",\n        Remark: \"\",\n        JobParams:\"\",\n        IsDeleted:false,\n        IsStart: false\n      };\n\n    },\n    //编辑\n    editSubmit: function() {\n      this.$refs.editForm.validate(valid => {\n        if (valid) {\n          this.$confirm(\"确认提交吗？\", \"提示\", {}).then(() => {\n            this.editLoading = true;\n            //NProgress.start();\n            let para = Object.assign({}, this.editForm);\n\n            para.birth =\n              !para.birth || para.birth == \"\"\n                ? util.formatDate.format(new Date(), \"yyyy-MM-dd\")\n                : util.formatDate.format(new Date(para.birth), \"yyyy-MM-dd\");\n\n            if (para.TriggerType) {\n                para.TriggerType=1;\n            }else{\n                para.TriggerType=0;\n            }\n            editTask(para).then(res => {\n              if (util.isEmt.format(res)) {\n                this.editLoading = false;\n                return;\n              }\n\n              if (res.data.success) {\n                this.editLoading = false;\n                //NProgress.done();\n                this.$message({\n                  message: res.data.msg,\n                  type: \"success\"\n                });\n                this.$refs[\"editForm\"].resetFields();\n                this.editFormVisible = false;\n                this.getTasks();\n              } else {\n                this.$message({\n                  message: res.data.msg,\n                  type: \"error\"\n                });\n              }\n            });\n          });\n        }\n      });\n    },\n    //新增\n    addSubmit: function() {\n      let _this = this;\n      this.$refs.addForm.validate(valid => {\n        if (valid) {\n          this.$confirm(\"确认提交吗？\", \"提示\", {}).then(() => {\n            this.addLoading = true;\n            //NProgress.start();\n            let para = Object.assign({}, this.addForm);\n            para.birth =\n              !para.birth || para.birth == \"\"\n                ? util.formatDate.format(new Date(), \"yyyy-MM-dd\")\n                : util.formatDate.format(new Date(para.birth), \"yyyy-MM-dd\");\n\n            var user = JSON.parse(window.localStorage.user);\n\n            if (user && user.uID > 0) {\n              para.CreateId = user.uID;\n              para.CreateBy = user.uRealName;\n            } else {\n              this.$message({\n                message: \"用户信息为空，先登录\",\n                type: \"error\"\n              });\n              _this.$router.replace(\n                _this.$route.query.redirect ? _this.$route.query.redirect : \"/\"\n              );\n            }\n\n            \n            if (para.TriggerType) {\n                para.TriggerType=1;\n            }else{\n                para.TriggerType=0;\n            }\n\n            addTask(para).then(res => {\n              if (util.isEmt.format(res)) {\n                this.addLoading = false;\n                return;\n              }\n              if (res.data.success) {\n                this.addLoading = false;\n                //NProgress.done();\n                this.$message({\n                  message: res.data.msg,\n                  type: \"success\"\n                });\n                this.$refs[\"addForm\"].resetFields();\n                this.addFormVisible = false;\n                this.getTasks();\n              } else {\n                this.$message({\n                  message: res.data.msg,\n                  type: \"error\"\n                });\n              }\n            });\n          });\n        }\n      });\n    },\n    //开启job\n    handleStartJob() {\n      let row = this.currentRow;\n      if (!row) {\n        this.$message({\n          message: \"请选择要操作的一行数据！\",\n          type: \"error\"\n        });\n\n        return;\n      }\n      this.$confirm(\"确认启动该Job吗?\", \"提示\", {\n        type: \"warning\"\n      })\n        .then(() => {\n          this.listLoading = true;\n          //NProgress.start();\n          let para = { jobId: row.Id };\n          startJob(para).then(res => {\n            if (util.isEmt.format(res)) {\n              this.listLoading = false;\n              return;\n            }\n            this.listLoading = false;\n            //NProgress.done();\n            if (res.data.success) {\n              this.$message({\n                message: \"启动成功\",\n                type: \"success\"\n              });\n            } else {\n              this.$message({\n                message: res.data.msg,\n                type: \"error\"\n              });\n            }\n\n            this.getTasks();\n          });\n        })\n        .catch(() => {});\n    },\n    //暂停job\n    handleStopJob() {\n      let row = this.currentRow;\n      if (!row) {\n        this.$message({\n          message: \"请选择要操作的一行数据！\",\n          type: \"error\"\n        });\n\n        return;\n      }\n      this.$confirm(\"确认暂停该Job吗?\", \"提示\", {\n        type: \"warning\"\n      })\n        .then(() => {\n          this.listLoading = true;\n          //NProgress.start();\n          let para = { jobId: row.Id };\n          stopJob(para).then(res => {\n            if (util.isEmt.format(res)) {\n              this.listLoading = false;\n              return;\n            }\n            this.listLoading = false;\n            //NProgress.done();\n            if (res.data.success) {\n              this.$message({\n                message: \"暂停成功\",\n                type: \"success\"\n              });\n            } else {\n              this.$message({\n                message: res.data.msg,\n                type: \"error\"\n              });\n            }\n\n            this.getTasks();\n          });\n        })\n        .catch(() => {});\n    },\n    //重启job\n    handleReCoveryJob() {\n      let row = this.currentRow;\n      if (!row) {\n        this.$message({\n          message: \"请选择要操作的一行数据！\",\n          type: \"error\"\n        });\n\n        return;\n      }\n      this.$confirm(\"确认重启该Job吗?\", \"提示\", {\n        type: \"warning\"\n      })\n        .then(() => {\n          this.listLoading = true;\n          //NProgress.start();\n          let para = { jobId: row.Id };\n          reCovery(para).then(res => {\n            if (util.isEmt.format(res)) {\n              this.listLoading = false;\n              return;\n            }\n            this.listLoading = false;\n            //NProgress.done();\n            if (res.data.success) {\n              this.$message({\n                message: \"重启成功\",\n                type: \"success\"\n              });\n            } else {\n              this.$message({\n                message: res.data.msg,\n                type: \"error\"\n              });\n            }\n\n            this.getTasks();\n          });\n        })\n        .catch(() => {});\n    },\n    selsChange: function(sels) {\n      this.sels = sels;\n    },\n    //批量删除\n    batchRemove: function() {\n      this.$message({\n        message: \"该功能未开放\",\n        type: \"warning\"\n      });\n    },\n    getButtonList2(routers) {\n      let _this = this;\n      routers.forEach(element => {\n        let path = this.$route.path.toLowerCase();\n        if (element.path && element.path.toLowerCase() == path) {\n          _this.buttonList = element.children;\n          return;\n        } else if (element.children) {\n          _this.getButtonList(element.children);\n        }\n      });\n    }\n  },\n  mounted() {\n    this.getTasks();\nconsole.log(this.addForm)\n    let routers = window.localStorage.router\n      ? JSON.parse(window.localStorage.router)\n      : [];\n    //第一种写法，每个页面都需要写方法，但是可以做特性化处理\n    // this.getButtonList(routers);\n    \n    //第二种写法，封装到 permissionRouter.js 中\n    this.buttonList = getButtonList(this.$route.path, routers);\n  }\n};\n",{"version":3,"sources":["QuartzJob.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"QuartzJob.vue","sourceRoot":"src\\views\\Task","sourcesContent":["<template>\n  <section>\n    <!--工具条-->\n    <toolbar :buttonList=\"buttonList\" @callFunction=\"callFunction\"></toolbar>\n\n    <!--列表-->\n    <el-table\n      :data=\"Tasks\"\n      highlight-current-row\n      v-loading=\"listLoading\"\n      @current-change=\"selectCurrentRow\"\n      style=\"width: 100%;\"\n    >\n      <el-table-column type=\"index\" width=\"80\"></el-table-column>\n      <el-table-column prop=\"JobGroup\" label=\"任务组\" width sortable></el-table-column>\n      <el-table-column prop=\"Name\" label=\"名称\" width sortable></el-table-column>\n      \n      <el-table-column prop=\"TriggerType\" label=\"任务类型\" width=\"\" sortable>\n        <template slot-scope=\"scope\">\n          <el-tag\n            :type=\"scope.row.TriggerType==1  ? 'success' : ''\"\n            disable-transitions\n          >{{scope.row.TriggerType==1 ? \"Cron\":\"Simple\"}}</el-tag>\n        </template>\n      </el-table-column>\n\n      <el-table-column prop=\"Cron\" label=\"Cron表达式\" width sortable></el-table-column>\n      <el-table-column prop=\"IntervalSecond\" label=\"循环s\" width sortable></el-table-column>\n      <el-table-column prop=\"RunTimes\" label=\"运行次数\" width sortable></el-table-column>\n      <el-table-column prop=\"AssemblyName\" label=\"程序集\" width sortable></el-table-column>\n      <el-table-column prop=\"ClassName\" label=\"执行类\" width=\"150\" sortable></el-table-column>\n      <el-table-column prop=\"BeginTime\" label=\"开始时间\" :formatter=\"formatBeginTime\" width sortable></el-table-column>\n      <el-table-column prop=\"EndTime\" label=\"结束时间\" :formatter=\"formatEndTime\" width sortable></el-table-column>\n      <!--<el-table-column prop=\"CreateBy\" label=\"创建者\" width=\"\" sortable>-->\n      <!--</el-table-column>-->\n      <el-table-column prop=\"IsStart\" label=\"状态\" width=\"\" sortable>\n        <template slot-scope=\"scope\">\n          <el-tag\n            :type=\"scope.row.IsStart  ? 'success' : 'danger'\"\n            disable-transitions\n          >{{scope.row.IsStart ? \"运行中\":\"停止\"}}</el-tag>\n        </template>\n      </el-table-column>\n\n      \n    <el-table-column\n      label=\"日志\" >\n      <template slot-scope=\"scope\">\n        <el-popover trigger=\"hover\" placement=\"top\">\n          <p v-html=\"scope.row.Remark\"></p>\n          <div slot=\"reference\" class=\"name-wrapper\">\n            <el-tag size=\"medium\">Log</el-tag>\n          </div>\n        </el-popover>\n      </template>\n    </el-table-column>\n\n    </el-table>\n\n    <!--工具条-->\n    <el-col :span=\"24\" class=\"toolbar\">\n      <el-button type=\"danger\" @click=\"batchRemove\" :disabled=\"this.sels.length===0\">批量删除</el-button>\n      <el-pagination\n        layout=\"prev, pager, next\"\n        @current-change=\"handleCurrentChange\"\n        :page-size=\"50\"\n        :total=\"total\"\n        style=\"float:right;\"\n      ></el-pagination>\n    </el-col>\n\n    <!--编辑界面-->\n    <el-dialog\n      title=\"编辑\"\n      :visible.sync=\"editFormVisible\"\n      v-model=\"editFormVisible\"\n      :close-on-click-modal=\"false\"\n    >\n      <el-form :model=\"editForm\" label-width=\"100px\" :rules=\"editFormRules\" ref=\"editForm\">\n        <el-form-item label=\"任务组\" prop=\"JobGroup\">\n          <el-input v-model=\"editForm.JobGroup\" auto-complete=\"off\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"名称\" prop=\"Name\">\n          <el-input v-model=\"editForm.Name\" auto-complete=\"off\"></el-input>\n        </el-form-item>\n         <el-form-item label=\"程序集\" prop=\"AssemblyName\">\n          <el-input v-model=\"editForm.AssemblyName\" auto-complete=\"off\"></el-input>\n        </el-form-item>\n         <el-form-item label=\"执行类名\" prop=\"ClassName\">\n          <el-input v-model=\"editForm.ClassName\" auto-complete=\"off\"></el-input>\n        </el-form-item>\n        \n        <el-form-item prop=\"TriggerType\" label=\"是否Cron\" width=\"\" sortable>\n            <el-switch v-model=\"editForm.TriggerType\" >\n            </el-switch>\n            <span style=\"float:right;color: #aaa;\">(1：Cron模式，0：Simple模式)</span> \n        </el-form-item>\n        \n        <el-form-item label=\"Cron表达式\" v-if=\"editForm.TriggerType\" prop=\"Cron\">\n           <el-tooltip placement=\"top\">\n            <div slot=\"content\">\n                 每隔5秒执行一次：*/5 * * * * ?<br >\n                 每隔1分钟执行一次：0 */1 * * * ?<br >\n                 每天23点执行一次：0 0 23 * * ?<br >\n                 每天凌晨1点执行一次：0 0 1 * * ?<br >\n                 每月1号凌晨1点执行一次：0 0 1 1 * ?<br >\n                 每月最后一天23点执行一次：0 0 23 L * ?<br >\n                 每周星期天凌晨1点实行一次：0 0 1 ? * L<br >\n                 在26分、29分、33分执行一次：0 26,29,33 * * * ?<br >\n                 每天的0点、13点、18点、21点都执行一次：0 0 0,13,18,21 * * ?<br >\n            </div>\n          <el-input v-model=\"editForm.Cron\" auto-complete=\"off\"></el-input>\n         </el-tooltip>\n        </el-form-item>\n        <el-form-item label=\"循环周期\" v-else prop=\"IntervalSecond\">\n          <el-input-number v-model=\"editForm.IntervalSecond\"  :min=\"1\" style=\"width:200px;\" auto-complete=\"off\"></el-input-number>\n            <span style=\"float:right;color: #aaa;\">(单位：秒)</span> \n        </el-form-item>\n\n        <el-form-item label=\"是否激活\" prop=\"IsStart\">\n          <el-switch v-model=\"editForm.IsStart\" >\n            </el-switch>\n        </el-form-item>\n\n        <el-form-item label=\"开始时间\" prop=\"BeginTime\">\n            <el-date-picker type=\"date\" placeholder=\"选择日期\" v-model=\"editForm.BeginTime\"></el-date-picker>\n        </el-form-item>\n        <el-form-item label=\"结束时间\" prop=\"EndTime\">\n            <el-date-picker type=\"date\" placeholder=\"选择日期\" v-model=\"editForm.EndTime\"></el-date-picker>\n        </el-form-item>\n\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click.native=\"editFormVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click.native=\"editSubmit\" :loading=\"editLoading\">提交</el-button>\n      </div>\n    </el-dialog>\n\n    <!--新增界面-->\n    <el-dialog\n      title=\"新增\"\n      :visible.sync=\"addFormVisible\"\n      v-model=\"addFormVisible\"\n      :close-on-click-modal=\"false\"\n    >\n      <el-form :model=\"addForm\" label-width=\"100px\" :rules=\"addFormRules\" ref=\"addForm\">\n         <el-form-item label=\"任务组\" prop=\"JobGroup\">\n          <el-input v-model=\"addForm.JobGroup\" auto-complete=\"off\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"名称\" prop=\"Name\">\n          <el-input v-model=\"addForm.Name\" auto-complete=\"off\"></el-input>\n        </el-form-item>\n         <el-form-item label=\"程序集\" prop=\"AssemblyName\">\n          <el-input v-model=\"addForm.AssemblyName\" auto-complete=\"off\"></el-input>\n        </el-form-item>\n         <el-form-item label=\"执行类名\" prop=\"ClassName\">\n          <el-input v-model=\"addForm.ClassName\" auto-complete=\"off\"></el-input>\n        </el-form-item>\n\n        <el-form-item prop=\"TriggerType\" label=\"是否Cron\" width=\"\" sortable>\n            <el-switch v-model=\"addForm.TriggerType\" >\n            </el-switch>\n            <span style=\"float:right;color: #aaa;\">(1：Cron模式，0：Simple模式)</span> \n        </el-form-item>\n        \n        <el-form-item label=\"Cron表达式\"  v-if=\"addForm.TriggerType\" prop=\"Cron\">\n          <el-tooltip placement=\"top\">\n            <div slot=\"content\">\n                 每隔5秒执行一次：*/5 * * * * ?<br >\n                 每隔1分钟执行一次：0 */1 * * * ?<br >\n                 每天23点执行一次：0 0 23 * * ?<br >\n                 每天凌晨1点执行一次：0 0 1 * * ?<br >\n                 每月1号凌晨1点执行一次：0 0 1 1 * ?<br >\n                 每月最后一天23点执行一次：0 0 23 L * ?<br >\n                 每周星期天凌晨1点实行一次：0 0 1 ? * L<br >\n                 在26分、29分、33分执行一次：0 26,29,33 * * * ?<br >\n                 每天的0点、13点、18点、21点都执行一次：0 0 0,13,18,21 * * ?<br >\n            </div>\n          <el-input v-model=\"addForm.Cron\" auto-complete=\"off\"></el-input>\n         </el-tooltip>\n\n        </el-form-item>\n        <el-form-item label=\"循环周期\" v-else  prop=\"IntervalSecond\">\n          <el-input-number v-model=\"addForm.IntervalSecond\"  :min=\"1\" style=\"width:200px;\" auto-complete=\"off\"></el-input-number>\n            <span style=\"float:right;color: #aaa;\">(单位：秒)</span> \n        </el-form-item>\n\n        <el-form-item label=\"是否激活\" prop=\"IsStart\">\n          <el-switch v-model=\"addForm.IsStart\" >\n            </el-switch>\n        </el-form-item>\n\n        <el-form-item label=\"开始时间\" prop=\"BeginTime\">\n            <el-date-picker type=\"date\" placeholder=\"选择日期\" v-model=\"addForm.BeginTime\"></el-date-picker>\n        </el-form-item>\n        <el-form-item label=\"结束时间\" prop=\"EndTime\">\n            <el-date-picker type=\"date\" placeholder=\"选择日期\" v-model=\"addForm.EndTime\"></el-date-picker>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click.native=\"addFormVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click.native=\"addSubmit\" :loading=\"addLoading\">提交</el-button>\n      </div>\n    </el-dialog>\n  </section>\n</template>\n\n<script>\nimport util from \"../../../util/date\";\nimport { getTaskListPage, removeTask, editTask, addTask,startJob, stopJob, reCovery } from \"../../api/api\";\nimport { getButtonList } from \"../../promissionRouter\";\nimport Toolbar from \"../../components/Toolbar\";\n\nexport default {\n  components: { Toolbar },\n  data() {\n    return {\n      filters: {\n        name: \"\"\n      },\n      buttonList: [],\n      Tasks: [],\n      statusList: [\n        { name: \"激活\", value: true },\n        { name: \"禁用\", value: false }\n      ],\n      total: 0,\n      page: 1,\n      listLoading: false,\n      sels: [], //列表选中列\n      currentRow: null,\n      addDialogFormVisible: false,\n      editFormVisible: false, //编辑界面是否显示\n      editLoading: false,\n      editFormRules: {\n        JobGroup: [{ required: true, message: \"请输入组名\", trigger: \"blur\" }],\n        Name: [{ required: true, message: \"请输入Job名\", trigger: \"blur\" }],\n        BeginTime: [{ required: true, message: \"请选择开始时间\", trigger: \"blur\" }],\n        EndTime: [{ required: true, message: \"请选择结束时间\", trigger: \"blur\" }],\n        AssemblyName: [{ required: true, message: \"请输入程序集名\", trigger: \"blur\" }],\n        ClassName: [{ required: true, message: \"请输入执行的Job类名\", trigger: \"blur\" }],\n      },\n      //编辑界面数据\n      editForm: {\n        Id: 0,\n        Name: \"\",\n        JobGroup: \"\",\n        Name: \"\",\n        TriggerType: 1,\n        Cron: \"\",\n        IntervalSecond: 0,\n        BeginTime: \"\",\n        EndTime: \"\",\n        AssemblyName: \"\",\n        ClassName: \"\",\n        Remark: \"\",\n        JobParams:\"\",\n        IsDeleted:false,\n        IsStart: false\n      },\n\n      addFormVisible: false, //新增界面是否显示\n      addLoading: false,\n      addFormRules: {\n        JobGroup: [{ required: true, message: \"请输入组名\", trigger: \"blur\" }],\n        Name: [{ required: true, message: \"请输入Job名\", trigger: \"blur\" }],\n        BeginTime: [{ required: true, message: \"请选择开始时间\", trigger: \"blur\" }],\n        EndTime: [{ required: true, message: \"请选择结束时间\", trigger: \"blur\" }],\n        AssemblyName: [{ required: true, message: \"请输入程序集名\", trigger: \"blur\" }],\n        ClassName: [{ required: true, message: \"请输入执行的Job类名\", trigger: \"blur\" }],\n      },\n      //新增界面数据\n      addForm: {\n        Id: 0,\n        Name: \"\",\n        JobGroup: \"\",\n        Name: \"\",\n        TriggerType: 1,\n        Cron: \"\",\n        IntervalSecond: 0,\n        BeginTime: \"\",\n        EndTime: \"\",\n        AssemblyName: \"\",\n        ClassName: \"\",\n        JobParams:\"\",\n        Remark: \"\",\n        IsDeleted:false,\n        IsStart: false\n      }\n    };\n  },\n  methods: {\n    selectCurrentRow(val) {\n      this.currentRow = val;\n    },\n    callFunction(item) {\n      this.filters = {\n        name: item.search\n      };\n      this[item.Func].apply(this, item);\n    },\n    //性别显示转换\n    formatEnabled: function(row, column) {\n      return row.Enabled ? \"正常\" : \"未知\";\n    },\n    formatCreateTime: function(row, column) {\n      return !row.CreateTime || row.CreateTime == \"\"\n        ? \"\"\n        : util.formatDate.format(new Date(row.CreateTime), \"yyyy-MM-dd\");\n    },\n    formatBeginTime: function(row, column) {\n      return !row.BeginTime || row.BeginTime == \"\"\n        ? \"\"\n        : util.formatDate.format(new Date(row.BeginTime), \"yyyy-MM-dd\");\n    },\n    formatEndTime: function(row, column) {\n      return !row.EndTime || row.EndTime == \"\"\n        ? \"\"\n        : util.formatDate.format(new Date(row.EndTime), \"yyyy-MM-dd\");\n    },\n    handleCurrentChange(val) {\n      this.page = val;\n      this.getTasks();\n    },\n    //获取用户列表\n    getTasks() {\n      let _this = this;\n      let para = {\n        page: this.page,\n        key: this.filters.name\n      };\n      this.listLoading = true;\n      //NProgress.start();\n      getTaskListPage(para).then(res => {\n        this.total = res.data.response.dataCount;\n        this.Tasks = res.data.response.data;\n        this.listLoading = false;\n\n        //NProgress.done();\n      });\n    },\n    //删除\n    handleDel() {\n      let row = this.currentRow;\n      if (!row) {\n        this.$message({\n          message: \"请选择要编辑的一行数据！\",\n          type: \"error\"\n        });\n\n        return;\n      }\n      this.$confirm(\"确认删除该记录吗?\", \"提示\", {\n        type: \"warning\"\n      })\n        .then(() => {\n          this.listLoading = true;\n          //NProgress.start();\n          let para = { id: row.Id };\n          removeTask(para).then(res => {\n            if (util.isEmt.format(res)) {\n              this.listLoading = false;\n              return;\n            }\n            this.listLoading = false;\n            //NProgress.done();\n            if (res.data.success) {\n              this.$message({\n                message: \"删除成功\",\n                type: \"success\"\n              });\n            } else {\n              this.$message({\n                message: res.data.msg,\n                type: \"error\"\n              });\n            }\n\n            this.getTasks();\n          });\n        })\n        .catch(() => {});\n    },\n    //显示编辑界面\n    handleEdit() {\n      let row = this.currentRow;\n      if (!row) {\n        this.$message({\n          message: \"请选择要编辑的一行数据！\",\n          type: \"error\"\n        });\n\n        return;\n      }\n\n      if (row.TriggerType==1) {\n          row.TriggerType=true\n      }\n\n      this.editFormVisible = true;\n      this.editForm = Object.assign({}, row);\n    },\n    //显示新增界面\n    handleAdd() {\n      this.addFormVisible = true;\n      this.addForm = {\n        Id: 0,\n        Name: \"\",\n        JobGroup: \"\",\n        Name: \"\",\n        TriggerType: true,\n        Cron: \"\",\n        IntervalSecond: 0,\n        BeginTime: \"\",\n        EndTime: \"\",\n        AssemblyName: \"\",\n        ClassName: \"\",\n        Remark: \"\",\n        JobParams:\"\",\n        IsDeleted:false,\n        IsStart: false\n      };\n\n    },\n    //编辑\n    editSubmit: function() {\n      this.$refs.editForm.validate(valid => {\n        if (valid) {\n          this.$confirm(\"确认提交吗？\", \"提示\", {}).then(() => {\n            this.editLoading = true;\n            //NProgress.start();\n            let para = Object.assign({}, this.editForm);\n\n            para.birth =\n              !para.birth || para.birth == \"\"\n                ? util.formatDate.format(new Date(), \"yyyy-MM-dd\")\n                : util.formatDate.format(new Date(para.birth), \"yyyy-MM-dd\");\n\n            if (para.TriggerType) {\n                para.TriggerType=1;\n            }else{\n                para.TriggerType=0;\n            }\n            editTask(para).then(res => {\n              if (util.isEmt.format(res)) {\n                this.editLoading = false;\n                return;\n              }\n\n              if (res.data.success) {\n                this.editLoading = false;\n                //NProgress.done();\n                this.$message({\n                  message: res.data.msg,\n                  type: \"success\"\n                });\n                this.$refs[\"editForm\"].resetFields();\n                this.editFormVisible = false;\n                this.getTasks();\n              } else {\n                this.$message({\n                  message: res.data.msg,\n                  type: \"error\"\n                });\n              }\n            });\n          });\n        }\n      });\n    },\n    //新增\n    addSubmit: function() {\n      let _this = this;\n      this.$refs.addForm.validate(valid => {\n        if (valid) {\n          this.$confirm(\"确认提交吗？\", \"提示\", {}).then(() => {\n            this.addLoading = true;\n            //NProgress.start();\n            let para = Object.assign({}, this.addForm);\n            para.birth =\n              !para.birth || para.birth == \"\"\n                ? util.formatDate.format(new Date(), \"yyyy-MM-dd\")\n                : util.formatDate.format(new Date(para.birth), \"yyyy-MM-dd\");\n\n            var user = JSON.parse(window.localStorage.user);\n\n            if (user && user.uID > 0) {\n              para.CreateId = user.uID;\n              para.CreateBy = user.uRealName;\n            } else {\n              this.$message({\n                message: \"用户信息为空，先登录\",\n                type: \"error\"\n              });\n              _this.$router.replace(\n                _this.$route.query.redirect ? _this.$route.query.redirect : \"/\"\n              );\n            }\n\n            \n            if (para.TriggerType) {\n                para.TriggerType=1;\n            }else{\n                para.TriggerType=0;\n            }\n\n            addTask(para).then(res => {\n              if (util.isEmt.format(res)) {\n                this.addLoading = false;\n                return;\n              }\n              if (res.data.success) {\n                this.addLoading = false;\n                //NProgress.done();\n                this.$message({\n                  message: res.data.msg,\n                  type: \"success\"\n                });\n                this.$refs[\"addForm\"].resetFields();\n                this.addFormVisible = false;\n                this.getTasks();\n              } else {\n                this.$message({\n                  message: res.data.msg,\n                  type: \"error\"\n                });\n              }\n            });\n          });\n        }\n      });\n    },\n    //开启job\n    handleStartJob() {\n      let row = this.currentRow;\n      if (!row) {\n        this.$message({\n          message: \"请选择要操作的一行数据！\",\n          type: \"error\"\n        });\n\n        return;\n      }\n      this.$confirm(\"确认启动该Job吗?\", \"提示\", {\n        type: \"warning\"\n      })\n        .then(() => {\n          this.listLoading = true;\n          //NProgress.start();\n          let para = { jobId: row.Id };\n          startJob(para).then(res => {\n            if (util.isEmt.format(res)) {\n              this.listLoading = false;\n              return;\n            }\n            this.listLoading = false;\n            //NProgress.done();\n            if (res.data.success) {\n              this.$message({\n                message: \"启动成功\",\n                type: \"success\"\n              });\n            } else {\n              this.$message({\n                message: res.data.msg,\n                type: \"error\"\n              });\n            }\n\n            this.getTasks();\n          });\n        })\n        .catch(() => {});\n    },\n    //暂停job\n    handleStopJob() {\n      let row = this.currentRow;\n      if (!row) {\n        this.$message({\n          message: \"请选择要操作的一行数据！\",\n          type: \"error\"\n        });\n\n        return;\n      }\n      this.$confirm(\"确认暂停该Job吗?\", \"提示\", {\n        type: \"warning\"\n      })\n        .then(() => {\n          this.listLoading = true;\n          //NProgress.start();\n          let para = { jobId: row.Id };\n          stopJob(para).then(res => {\n            if (util.isEmt.format(res)) {\n              this.listLoading = false;\n              return;\n            }\n            this.listLoading = false;\n            //NProgress.done();\n            if (res.data.success) {\n              this.$message({\n                message: \"暂停成功\",\n                type: \"success\"\n              });\n            } else {\n              this.$message({\n                message: res.data.msg,\n                type: \"error\"\n              });\n            }\n\n            this.getTasks();\n          });\n        })\n        .catch(() => {});\n    },\n    //重启job\n    handleReCoveryJob() {\n      let row = this.currentRow;\n      if (!row) {\n        this.$message({\n          message: \"请选择要操作的一行数据！\",\n          type: \"error\"\n        });\n\n        return;\n      }\n      this.$confirm(\"确认重启该Job吗?\", \"提示\", {\n        type: \"warning\"\n      })\n        .then(() => {\n          this.listLoading = true;\n          //NProgress.start();\n          let para = { jobId: row.Id };\n          reCovery(para).then(res => {\n            if (util.isEmt.format(res)) {\n              this.listLoading = false;\n              return;\n            }\n            this.listLoading = false;\n            //NProgress.done();\n            if (res.data.success) {\n              this.$message({\n                message: \"重启成功\",\n                type: \"success\"\n              });\n            } else {\n              this.$message({\n                message: res.data.msg,\n                type: \"error\"\n              });\n            }\n\n            this.getTasks();\n          });\n        })\n        .catch(() => {});\n    },\n    selsChange: function(sels) {\n      this.sels = sels;\n    },\n    //批量删除\n    batchRemove: function() {\n      this.$message({\n        message: \"该功能未开放\",\n        type: \"warning\"\n      });\n    },\n    getButtonList2(routers) {\n      let _this = this;\n      routers.forEach(element => {\n        let path = this.$route.path.toLowerCase();\n        if (element.path && element.path.toLowerCase() == path) {\n          _this.buttonList = element.children;\n          return;\n        } else if (element.children) {\n          _this.getButtonList(element.children);\n        }\n      });\n    }\n  },\n  mounted() {\n    this.getTasks();\nconsole.log(this.addForm)\n    let routers = window.localStorage.router\n      ? JSON.parse(window.localStorage.router)\n      : [];\n    //第一种写法，每个页面都需要写方法，但是可以做特性化处理\n    // this.getButtonList(routers);\n    \n    //第二种写法，封装到 permissionRouter.js 中\n    this.buttonList = getButtonList(this.$route.path, routers);\n  }\n};\n</script>\n\n<style scoped>\n</style>\n"]}]}