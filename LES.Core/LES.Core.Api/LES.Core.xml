<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LES.Core.Api</name>
    </assembly>
    <members>
        <member name="F:LES.Core.Api.Controllers.Base_CodeItemsController._base_CodeItemsServices">
            <summary>
            服务器接口，因为是模板生成，所以首字母是大写的，自己可以重构下
            </summary>
        </member>
        <member name="M:LES.Core.Api.Controllers.Base_CodeItemsController.GetCodeItemsBySetCode(System.String)">
            <summary>
            通过代码集获取代码项集合
            </summary>
            <param name="setCode">代码集编码</param>
            <returns>代码项集合</returns>
        </member>
        <member name="F:LES.Core.Api.Controllers.Base_CodeSetsController._base_CodeSetsServices">
            <summary>
            服务器接口，因为是模板生成，所以首字母是大写的，自己可以重构下
            </summary>
        </member>
        <member name="M:LES.Core.Api.Controllers.Base_CodeSetsController.GetAll">
            <summary>
            获取所有的码表集
            </summary>
            <returns></returns>
        </member>
        <member name="T:LES.Core.Api.Controllers.Base_SalverController">
            <summary>
            托盘管理
            </summary>
        </member>
        <member name="F:LES.Core.Api.Controllers.Base_SalverController._base_SalverServices">
            <summary>
            服务器接口，因为是模板生成，所以首字母是大写的，自己可以重构下
            </summary>
        </member>
        <member name="T:LES.Core.Api.Controllers.Base_StationController">
            <summary> 
            站点管理控制器 
            </summary> 
        </member>
        <member name="M:LES.Core.Api.Controllers.Base_StationController.Get(LES.Core.Model.ParamModels.Base_StationParam)">
            <summary> 
            分页获取站点管理列表 
            </summary> 
            <param name="param">筛选条件</param> 
            <returns>获取结果</returns> 
        </member>
        <member name="M:LES.Core.Api.Controllers.Base_StationController.Get(System.Int32)">
            <summary> 
            获取单个站点管理 
            </summary> 
            <param name="id">主键</param> 
            <returns>获取结果</returns> 
        </member>
        <member name="M:LES.Core.Api.Controllers.Base_StationController.Post(LES.Core.Model.Models.Base_Station)">
            <summary> 
            新增站点管理 
            </summary> 
            <param name="request">要新增的站点管理对象</param> 
            <returns></returns> 
        </member>
        <member name="M:LES.Core.Api.Controllers.Base_StationController.Put(LES.Core.Model.Models.Base_Station)">
            <summary> 
            更新站点管理 
            </summary> 
            <param name="request">要更新的站点管理对象</param> 
            <returns>更新结果</returns> 
        </member>
        <member name="M:LES.Core.Api.Controllers.Base_StationController.Delete(System.Int32)">
            <summary> 
            删除站点管理 
            </summary> 
            <param name="id">主键</param> 
            <returns>删除结果</returns> 
        </member>
        <member name="T:LES.Core.Api.Controllers.Wip_InStockRecordController">
            <summary> 
            入库记录控制器 
            </summary> 
        </member>
        <member name="M:LES.Core.Api.Controllers.Wip_InStockRecordController.Get(LES.Core.Model.ParamModels.Wip_InStockRecordParam)">
            <summary> 
            分页获取入库记录列表 
            </summary> 
            <param name="param">筛选条件</param> 
            <returns>获取结果</returns> 
        </member>
        <member name="M:LES.Core.Api.Controllers.Wip_InStockRecordController.Get(System.Int32)">
            <summary> 
            获取单个入库记录 
            </summary> 
            <param name="id">主键</param> 
            <returns>获取结果</returns> 
        </member>
        <member name="M:LES.Core.Api.Controllers.Wip_InStockRecordController.Post(LES.Core.Model.Models.Wip_InStockRecord)">
            <summary> 
            新增入库记录 
            </summary> 
            <param name="request">要新增的入库记录对象</param> 
            <returns></returns> 
        </member>
        <member name="M:LES.Core.Api.Controllers.Wip_InStockRecordController.Put(LES.Core.Model.Models.Wip_InStockRecord)">
            <summary> 
            更新入库记录 
            </summary> 
            <param name="request">要更新的入库记录对象</param> 
            <returns>更新结果</returns> 
        </member>
        <member name="M:LES.Core.Api.Controllers.Wip_InStockRecordController.Delete(System.Int32)">
            <summary> 
            删除入库记录 
            </summary> 
            <param name="id">主键</param> 
            <returns>删除结果</returns> 
        </member>
        <member name="T:LES.Core.Api.Controllers.Wip_OutStockRecordController">
            <summary> 
            出库记录控制器 
            </summary> 
        </member>
        <member name="M:LES.Core.Api.Controllers.Wip_OutStockRecordController.Get(LES.Core.Model.ParamModels.Wip_OutStockRecordParam)">
            <summary> 
            分页获取出库记录列表 
            </summary> 
            <param name="param">筛选条件</param> 
            <returns>获取结果</returns> 
        </member>
        <member name="M:LES.Core.Api.Controllers.Wip_OutStockRecordController.Get(System.Int32)">
            <summary> 
            获取单个出库记录 
            </summary> 
            <param name="id">主键</param> 
            <returns>获取结果</returns> 
        </member>
        <member name="M:LES.Core.Api.Controllers.Wip_OutStockRecordController.Post(LES.Core.Model.Models.Wip_OutStockRecord)">
            <summary> 
            新增出库记录 
            </summary> 
            <param name="request">要新增的出库记录对象</param> 
            <returns></returns> 
        </member>
        <member name="M:LES.Core.Api.Controllers.Wip_OutStockRecordController.Put(LES.Core.Model.Models.Wip_OutStockRecord)">
            <summary> 
            更新出库记录 
            </summary> 
            <param name="request">要更新的出库记录对象</param> 
            <returns>更新结果</returns> 
        </member>
        <member name="M:LES.Core.Api.Controllers.Wip_OutStockRecordController.Delete(System.Int32)">
            <summary> 
            删除出库记录 
            </summary> 
            <param name="id">主键</param> 
            <returns>删除结果</returns> 
        </member>
        <member name="T:LES.Core.Api.Controllers.Wip_StockInfoController">
            <summary> 
            库存信息控制器 
            </summary> 
        </member>
        <member name="M:LES.Core.Api.Controllers.Wip_StockInfoController.Get(LES.Core.Model.ParamModels.Wip_StockInfoParam)">
            <summary> 
            分页获取库存信息列表 
            </summary> 
            <param name="param">筛选条件</param> 
            <returns>获取结果</returns> 
        </member>
        <member name="M:LES.Core.Api.Controllers.Wip_StockInfoController.Get(System.Int32)">
            <summary> 
            获取单个库存信息 
            </summary> 
            <param name="id">主键</param> 
            <returns>获取结果</returns> 
        </member>
        <member name="M:LES.Core.Api.Controllers.Wip_StockInfoController.Post(LES.Core.Model.Models.Wip_StockInfo)">
            <summary> 
            新增库存信息 
            </summary> 
            <param name="request">要新增的库存信息对象</param> 
            <returns></returns> 
        </member>
        <member name="M:LES.Core.Api.Controllers.Wip_StockInfoController.Put(LES.Core.Model.Models.Wip_StockInfo)">
            <summary> 
            更新库存信息 
            </summary> 
            <param name="request">要更新的库存信息对象</param> 
            <returns>更新结果</returns> 
        </member>
        <member name="M:LES.Core.Api.Controllers.Wip_StockInfoController.Delete(System.Int32)">
            <summary> 
            删除库存信息 
            </summary> 
            <param name="id">主键</param> 
            <returns>删除结果</returns> 
        </member>
        <member name="M:LES.Core.Controllers.DbFirstController.#ctor(SqlSugar.ISqlSugarClient,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:LES.Core.Controllers.DbFirstController.GetFrameFiles">
            <summary>
            获取 整体框架 文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.DbFirstController.GetFrameFilesByTableNames(System.String[],System.String)">
            <summary>
            根据数据库表名 生成整体框架
            仅针对通过CodeFirst生成表的情况
            </summary>
            <param name="ConnID">数据库链接名称</param>
            <param name="tableNames">需要生成的表名</param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.DbFirstController.GetAllFrameFilesByTableNames(System.String[],System.String)">
            <summary>
            DbFrist 根据数据库表名 生成整体框架,包含Model层
            </summary>
            <param name="ConnID">数据库链接名称</param>
            <param name="tableNames">需要生成的表名</param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.MigrateController.DataMigrateFromOld2New">
            <summary>
            获取权限部分Map数据（从库）
            迁移到新库（主库）
            </summary>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.MigrateController.SaveData2TsvAsync">
            <summary>
            权限数据库导出tsv
            </summary>
            <returns></returns>
        </member>
        <member name="T:LES.Core.Controllers.HealthCheckController">
            <summary>
            健康检查
            </summary>
        </member>
        <member name="M:LES.Core.Controllers.HealthCheckController.Get">
            <summary>
            健康检查接口
            </summary>
            <returns></returns>
        </member>
        <member name="T:LES.Core.Controllers.ImgController">
            <summary>
            图片管理
            </summary>
        </member>
        <member name="M:LES.Core.Controllers.ImgController.#ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            构造函数
            </summary>
             <param name="environment"></param>
        </member>
        <member name="M:LES.Core.Controllers.ImgController.DownImg(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            下载图片（支持中文字符）
            </summary>
            <param name="environment"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.ImgController.InsertPicture(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            上传图片,多文件，可以使用 postman 测试，
            如果是单文件，可以 参数写 IFormFile file1
            </summary>
            <param name="environment"></param>
            <returns></returns>
        </member>
        <member name="T:LES.Core.Controllers.LoginController">
            <summary>
            登录管理【无权限】
            </summary>
        </member>
        <member name="M:LES.Core.Controllers.LoginController.#ctor(LES.Core.IServices.ISysUserInfoServices,LES.Core.IServices.IUserRoleServices,LES.Core.IServices.IRoleServices,LES.Core.AuthHelper.PermissionRequirement,LES.Core.IServices.IRoleModulePermissionServices)">
            <summary>
            构造函数注入
            </summary>
            <param name="sysUserInfoServices"></param>
            <param name="userRoleServices"></param>
            <param name="roleServices"></param>
            <param name="requirement"></param>
            <param name="roleModulePermissionServices"></param>
        </member>
        <member name="M:LES.Core.Controllers.LoginController.GetJwtStr(System.String,System.String)">
            <summary>
            获取JWT的方法1
            </summary>
            <param name="name"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.LoginController.GetJwtStrForNuxt(System.String,System.String)">
            <summary>
            获取JWT的方法2：给Nuxt提供
            </summary>
            <param name="name"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.LoginController.GetJwtToken3(System.String,System.String)">
            <summary>
            获取JWT的方法3：整个系统主要方法
            </summary>
            <param name="name"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.LoginController.RefreshToken(System.String)">
            <summary>
            请求刷新Token（以旧换新）
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.LoginController.Getjsonp(System.String,System.Int64,System.String,System.Int32,System.Int32)">
            <summary>
            获取JWT的方法4：给 JSONP 测试
            </summary>
            <param name="callBack"></param>
            <param name="id"></param>
            <param name="sub"></param>
            <param name="expiresSliding"></param>
            <param name="expiresAbsoulute"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.LoginController.Md5Password(System.String)">
            <summary>
            测试 MD5 加密字符串
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:LES.Core.Controllers.ModuleController">
            <summary>
            接口管理
            </summary>
        </member>
        <member name="M:LES.Core.Controllers.ModuleController.Get(LES.Core.Model.ParamModels.ModulesParam)">
            <summary>
            分页获取接口api
            </summary>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.ModuleController.GetAll">
            <summary>
            获取全部接口api
            </summary>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.ModuleController.Post(LES.Core.Model.Models.Modules)">
            <summary>
            添加一条接口信息
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.ModuleController.Put(LES.Core.Model.Models.Modules)">
            <summary>
            更新接口信息
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.ModuleController.Delete(System.Int32)">
            <summary>
            删除一条接口
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.MonitorController.Server">
            <summary>
            服务器配置信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.MonitorController.Get">
            <summary>
            SignalR send data
            </summary>
            <returns></returns>
        </member>
        <member name="T:LES.Core.Controllers.PermissionController">
            <summary>
            菜单管理
            </summary>
        </member>
        <member name="M:LES.Core.Controllers.PermissionController.#ctor(LES.Core.IServices.IPermissionServices,LES.Core.IServices.IModuleServices,LES.Core.IServices.IRoleModulePermissionServices,LES.Core.IServices.IUserRoleServices,Microsoft.AspNetCore.Http.IHttpContextAccessor,LES.Core.Common.HttpContextUser.IUser,LES.Core.AuthHelper.PermissionRequirement)">
            <summary>
            构造函数
            </summary>
            <param name="permissionServices"></param>
            <param name="moduleServices"></param>
            <param name="roleModulePermissionServices"></param>
            <param name="userRoleServices"></param>
            <param name="httpContext"></param>
            <param name="user"></param>
            <param name="requirement"></param>
        </member>
        <member name="M:LES.Core.Controllers.PermissionController.Get(System.Int32,System.String)">
            <summary>
            获取菜单
            </summary>
            <param name="page"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.PermissionController.GetTreeTable(System.Int32,System.String)">
            <summary>
            查询树形 Table
            </summary>
            <param name="f">父节点</param>
            <param name="key">关键字</param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.PermissionController.Post(LES.Core.Model.Models.Permission)">
            <summary>
            添加一个菜单
            </summary>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.PermissionController.Assign(LES.Core.Controllers.AssignView)">
            <summary>
            保存菜单权限分配
            </summary>
            <param name="assignView"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.PermissionController.GetPermissionTree(System.Int32,System.Boolean)">
            <summary>
            获取菜单树
            </summary>
            <param name="pid"></param>
            <param name="needbtn"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.PermissionController.GetNavigationBar(System.Int32)">
            <summary>
            获取路由树
            </summary>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.PermissionController.GetPermissionIdByRoleId(System.Int32)">
            <summary>
            通过角色获取菜单【无权限】
            </summary>
            <param name="rid"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.PermissionController.Put(LES.Core.Model.Models.Permission)">
            <summary>
            更新菜单
            </summary>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.PermissionController.Delete(System.Int32)">
            <summary>
            删除菜单
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:LES.Core.Controllers.RoleController">
            <summary>
            角色管理
            </summary>
        </member>
        <member name="M:LES.Core.Controllers.RoleController.Get(LES.Core.Model.ParamModels.RoleParam)">
            <summary>
            分页获取全部角色
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.RoleController.GetAll">
            <summary>
            获取全部角色
            </summary>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.RoleController.Post(LES.Core.Model.Models.Role)">
            <summary>
            添加角色
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.RoleController.Put(LES.Core.Model.Models.Role)">
            <summary>
            更新角色
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.RoleController.Delete(System.Int32)">
            <summary>
            删除角色
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.TasksQzController.Get(System.Int32,System.String)">
            <summary>
            分页获取
            </summary>
            <param name="page"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.TasksQzController.Post(LES.Core.Model.Models.TasksQz)">
            <summary>
            添加计划任务
            </summary>
            <param name="tasksQz"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.TasksQzController.Put(LES.Core.Model.Models.TasksQz)">
            <summary>
            修改计划任务
            </summary>
            <param name="tasksQz"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.TasksQzController.StartJob(System.Int32)">
            <summary>
            启动计划任务
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.TasksQzController.StopJob(System.Int32)">
            <summary>
            停止一个计划任务
            </summary>
            <param name="jobId"></param>
            <returns></returns>        
        </member>
        <member name="M:LES.Core.Controllers.TasksQzController.ReCovery(System.Int32)">
            <summary>
            重启一个计划任务
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="T:LES.Core.Controllers.TopicController">
            <summary>
            类别管理【无权限】
            </summary>
        </member>
        <member name="M:LES.Core.Controllers.TopicController.#ctor(LES.Core.IServices.ITopicServices)">
            <summary>
            构造函数
            </summary>
            <param name="topicServices"></param>
        </member>
        <member name="M:LES.Core.Controllers.TopicController.Get">
            <summary>
            获取Tibug所有分类
            </summary>
            <returns></returns>
        </member>
        <member name="T:LES.Core.Controllers.TopicDetailController">
            <summary>
            Tibug 管理
            </summary>
        </member>
        <member name="M:LES.Core.Controllers.TopicDetailController.#ctor(LES.Core.IServices.ITopicServices,LES.Core.IServices.ITopicDetailServices)">
            <summary>
            构造函数
            </summary>
            <param name="topicServices"></param>
            <param name="topicDetailServices"></param>
        </member>
        <member name="M:LES.Core.Controllers.TopicDetailController.Get(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            获取Bug数据列表（带分页）
            【无权限】
            </summary>
            <param name="page">页数</param>
            <param name="tname">专题类型</param>
            <param name="key">关键字</param>
            <param name="intPageSize"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.TopicDetailController.Get(System.Int32)">
            <summary>
            获取详情【无权限】
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.TopicDetailController.Post(LES.Core.Model.Models.TopicDetail)">
            <summary>
            添加一个 BUG 【无权限】
            </summary>
            <param name="topicDetail"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.TopicDetailController.Update(LES.Core.Model.Models.TopicDetail)">
            <summary>
            更新 bug
            </summary>
            <param name="topicDetail"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.TopicDetailController.Delete(System.Int32)">
            <summary>
            删除 bug
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:LES.Core.Controllers.UserController">
            <summary>
            用户管理
            </summary>
        </member>
        <member name="M:LES.Core.Controllers.UserController.#ctor(LES.Core.IRepository.UnitOfWork.IUnitOfWork,LES.Core.IServices.ISysUserInfoServices,LES.Core.IServices.IUserRoleServices,LES.Core.IServices.IRoleServices,LES.Core.Common.HttpContextUser.IUser,Microsoft.Extensions.Logging.ILogger{LES.Core.Controllers.UserController},Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            构造函数
            </summary>
            <param name="unitOfWork"></param>
            <param name="sysUserInfoServices"></param>
            <param name="userRoleServices"></param>
            <param name="roleServices"></param>
            <param name="user"></param>
            <param name="logger"></param>
             <param name="environment"></param>
        </member>
        <member name="M:LES.Core.Controllers.UserController.Get(LES.Core.Model.ParamModels.UserInfoParam)">
            <summary>
            获取全部用户
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.UserController.GetInfoByToken(System.String)">
            <summary>
            获取用户详情根据token
            【无权限】
            </summary>
            <param name="token">令牌</param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.UserController.Post(LES.Core.Model.Models.sysUserInfo)">
            <summary>
            添加一个用户
            </summary>
            <param name="sysUserInfo"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.UserController.Put(LES.Core.Model.Models.sysUserInfo)">
            <summary>
            更新用户与角色
            </summary>
            <param name="sysUserInfo"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.UserController.UpdatePerson(LES.Core.Model.ParamModels.UpdateSysUserInfoParam)">
            <summary>
            更新用户密码等信息
            </summary>
            <param name="sysUserInfo"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.UserController.Delete(System.Int32)">
            <summary>
            删除用户
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:LES.Core.Controllers.UserRoleController">
            <summary>
            用户角色关系
            </summary>
        </member>
        <member name="M:LES.Core.Controllers.UserRoleController.#ctor(LES.Core.IServices.ISysUserInfoServices,LES.Core.IServices.IUserRoleServices,LES.Core.IServices.IRoleServices)">
            <summary>
            构造函数
            </summary>
            <param name="sysUserInfoServices"></param>
            <param name="userRoleServices"></param>
            <param name="roleServices"></param>
        </member>
        <member name="M:LES.Core.Controllers.UserRoleController.AddUser(System.String,System.String)">
            <summary>
            新建用户
            </summary>
            <param name="loginName"></param>
            <param name="loginPwd"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.UserRoleController.AddRole(System.String)">
            <summary>
            新建Role
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:LES.Core.Controllers.UserRoleController.AddUserRole(System.Int32,System.Int32)">
            <summary>
            新建用户角色关系
            </summary>
            <param name="uid"></param>
            <param name="rid"></param>
            <returns></returns>
        </member>
        <member name="T:LES.Core.SwaggerHelper.CustomRouteAttribute">
            <summary>
            自定义路由 /api/{version}/[controler]/[action]
            </summary>
        </member>
        <member name="P:LES.Core.SwaggerHelper.CustomRouteAttribute.GroupName">
            <summary>
            分组名称,是来实现接口 IApiDescriptionGroupNameProvider
            </summary>
        </member>
        <member name="M:LES.Core.SwaggerHelper.CustomRouteAttribute.#ctor(System.String)">
            <summary>
            自定义路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
        </member>
        <member name="M:LES.Core.SwaggerHelper.CustomRouteAttribute.#ctor(LES.Core.Extensions.CustomApiVersion.ApiVersions,System.String)">
            <summary>
            自定义版本+路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
            <param name="version"></param>
        </member>
        <member name="T:LES.Core.Filter.GlobalRouteAuthorizeConvention">
            <summary>
            Summary:全局路由权限公约
            Remarks:目的是针对不同的路由，采用不同的授权过滤器
            如果 controller 上不加 [Authorize] 特性，默认都是 Permission 策略
            否则，如果想特例其他授权机制的话，需要在 controller 上带上  [Authorize]，然后再action上自定义授权即可，比如 [Authorize(Roles = "Admin")]
            </summary>
        </member>
        <member name="T:LES.Core.Filter.GlobalAuthorizeFilter">
            <summary>
            全局权限过滤器【无效】
            </summary>
        </member>
        <member name="T:LES.Core.Filter.GlobalExceptionsFilter">
            <summary>
            全局异常错误日志
            </summary>
        </member>
        <member name="M:LES.Core.Filter.GlobalExceptionsFilter.WriteLog(System.String,System.Exception)">
            <summary>
            自定义返回格式
            </summary>
            <param name="throwMsg"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:LES.Core.Filter.JsonErrorResponse.Message">
            <summary>
            生产环境的消息
            </summary>
        </member>
        <member name="P:LES.Core.Filter.JsonErrorResponse.DevelopmentMessage">
            <summary>
            开发环境的消息
            </summary>
        </member>
        <member name="T:LES.Core.Filter.GlobalRoutePrefixFilter">
            <summary>
            全局路由前缀公约
            </summary>
        </member>
    </members>
</doc>
